const db = require('../db');
const { send: enviarEmail } = require('../utils/email');
const { formatarDataBR } = require('../utils/data');
const { criarNotificacao } = require('./notificacoesController');

// ‚ûï Inscrever-se em uma turma
async function inscreverEmTurma(req, res) {
  const usuario_id = req.usuario.id;
  const { turma_id } = req.body;

  if (!turma_id) {
    return res.status(400).json({ erro: 'ID da turma √© obrigat√≥rio.' });
  }

  try {
    const turmaResult = await db.query('SELECT * FROM turmas WHERE id = $1', [turma_id]);
    if (turmaResult.rows.length === 0) {
      return res.status(404).json({ erro: 'Turma n√£o encontrada.' });
    }

    const turma = turmaResult.rows[0];

    const duplicado = await db.query(
      'SELECT 1 FROM inscricoes WHERE usuario_id = $1 AND turma_id = $2',
      [usuario_id, turma_id]
    );
    if (duplicado.rows.length > 0) {
      return res.status(409).json({ erro: 'Usu√°rio j√° inscrito nesta turma.' });
    }

    const inscricoesAtuais = await db.query(
      'SELECT COUNT(*) FROM inscricoes WHERE turma_id = $1',
      [turma_id]
    );
    const totalInscritos = parseInt(inscricoesAtuais.rows[0].count, 10);
    const totalVagas = parseInt(turma.vagas_total, 10);

    if (isNaN(totalVagas)) {
      return res.status(500).json({ erro: 'N√∫mero de vagas inv√°lido para a turma.' });
    }

    if (totalInscritos >= totalVagas) {
      return res.status(400).json({ erro: 'Turma lotada. Vagas esgotadas.' });
    }

    const result = await db.query(
      `INSERT INTO inscricoes (usuario_id, turma_id, data_inscricao) 
       VALUES ($1, $2, NOW()) 
       RETURNING *`,
      [usuario_id, turma_id]
    );

    if (result.rowCount === 0) {
      return res.status(500).json({ erro: 'Erro ao registrar inscri√ß√£o no banco.' });
    }

    // Buscar t√≠tulo do evento e local
    const eventoResult = await db.query(
      'SELECT titulo, local FROM eventos WHERE id = $1',
      [turma.evento_id]
    );
    const evento = eventoResult.rows[0];
    const tituloEvento = evento?.titulo || "Evento";
    const localEvento = evento?.local || "A definir";

    // ‚úÖ Notifica√ß√£o detalhada
    const mensagem = `
‚úÖ Sua inscri√ß√£o foi confirmada com sucesso no evento "${tituloEvento}".

- Turma: ${turma.nome}
- Per√≠odo: ${formatarDataBR(turma.data_inicio)} a ${formatarDataBR(turma.data_fim)}
- Hor√°rio: ${turma.horario_inicio?.slice(0,5)} √†s ${turma.horario_fim?.slice(0,5)}
- Carga hor√°ria: ${turma.carga_horaria} horas
- Local: ${localEvento}
    `.trim();

    await criarNotificacao(
      usuario_id,
      mensagem,
      null,
      "/eventos"
    );

    // Buscar dados do usu√°rio
    const usuarioResult = await db.query('SELECT nome, email FROM usuarios WHERE id = $1', [usuario_id]);
    const usuario = usuarioResult.rows[0];

    if (!usuario || !usuario.email) {
      console.error('‚ùå E-mail do usu√°rio n√£o encontrado.');
      return res.status(400).json({ erro: 'E-mail do usu√°rio n√£o est√° cadastrado.' });
    }

    const html = `
      <h2>Ol√°, ${usuario.nome}!</h2>
      <p>Sua inscri√ß√£o foi confirmada com sucesso.</p>

      <h3>üìå Detalhes da Inscri√ß√£o</h3>
      <p>
        <strong>Evento:</strong> ${tituloEvento}<br/>
        <strong>Turma:</strong> ${turma.nome}<br/>
        <strong>Per√≠odo:</strong> ${formatarDataBR(turma.data_inicio)} a ${formatarDataBR(turma.data_fim)}<br/>
        <strong>Hor√°rio:</strong> ${turma.horario_inicio?.slice(0,5)} √†s ${turma.horario_fim?.slice(0,5)}<br/>
        <strong>Carga hor√°ria:</strong> ${turma.carga_horaria} horas<br/>
        <strong>Local:</strong> ${localEvento}
      </p>

      <p>üìç Em caso de d√∫vidas, entre em contato com a equipe da Escola da Sa√∫de.</p>

      <p>Atenciosamente,<br/>
      <strong>Equipe da Escola da Sa√∫de</strong></p>
    `;

    await enviarEmail({
      to: usuario.email,
      subject: '‚úÖ Inscri√ß√£o Confirmada ‚Äì Escola da Sa√∫de',
      text: `Ol√°, ${usuario.nome}!

Sua inscri√ß√£o foi confirmada com sucesso no evento "${tituloEvento}".

Turma: ${turma.nome}
Per√≠odo: ${formatarDataBR(turma.data_inicio)} a ${formatarDataBR(turma.data_fim)}
Hor√°rio: ${turma.horario_inicio?.slice(0,5)} √†s ${turma.horario_fim?.slice(0,5)}
Carga hor√°ria: ${turma.carga_horaria} horas
Local: ${localEvento}

Atenciosamente,
Equipe da Escola da Sa√∫de`,
      html: html
    });

    return res.status(201).json({ mensagem: 'Inscri√ß√£o realizada com sucesso' });

  } catch (err) {
    console.error('‚ùå Erro ao processar inscri√ß√£o:', err);
    res.status(500).json({ erro: 'Erro ao processar inscri√ß√£o.' });
  }
}

// ‚ùå Cancelar inscri√ß√£o
async function cancelarMinhaInscricao(req, res) {
  const usuario_id = req.usuario.id;
  const { id } = req.params;

  try {
    const result = await db.query('SELECT * FROM inscricoes WHERE id = $1', [id]);
    const inscricao = result.rows[0];

    if (!inscricao) {
      return res.status(404).json({ erro: 'Inscri√ß√£o n√£o encontrada.' });
    }

    if (inscricao.usuario_id !== usuario_id && !req.usuario.perfil.includes('administrador')) {
      return res.status(403).json({ erro: 'Voc√™ n√£o tem permiss√£o para cancelar esta inscri√ß√£o.' });
    }

    await db.query('DELETE FROM inscricoes WHERE id = $1', [id]);

    res.json({ mensagem: 'Inscri√ß√£o cancelada com sucesso.' });
  } catch (err) {
    console.error('‚ùå Erro ao cancelar inscri√ß√£o:', err);
    res.status(500).json({ erro: 'Erro ao cancelar inscri√ß√£o.' });
  }
}

// üîç Minhas inscri√ß√µes
async function obterMinhasInscricoes(req, res) {
  try {
    const usuario_id = req.usuario.id;

    const resultado = await db.query(
      `SELECT 
  i.id AS inscricao_id, 
  e.id AS evento_id, 
  t.id AS turma_id,
  e.titulo, 
  e.local,
  t.data_inicio, 
  t.data_fim, 
  t.horario_inicio,  -- ‚úÖ adicionado
  t.horario_fim,
  i.data_inscricao,
  string_agg(DISTINCT u.nome, ', ' ORDER BY u.nome) AS instrutor
FROM inscricoes i
JOIN turmas t ON i.turma_id = t.id
JOIN eventos e ON t.evento_id = e.id
LEFT JOIN evento_instrutor tp ON t.evento_id = tp.evento_id
LEFT JOIN usuarios u ON u.id = tp.instrutor_id
WHERE i.usuario_id = $1
GROUP BY i.id, e.id, t.id
ORDER BY t.data_fim DESC, t.horario_fim DESC NULLS LAST`,
      [usuario_id]
    );

    res.json(resultado.rows);
  } catch (err) {
    console.error('‚ùå Erro ao buscar inscri√ß√µes:', err);
    res.status(500).json({ erro: 'Erro ao buscar inscri√ß√µes.' });
  }
}

// üìã Inscritos por turma
async function listarInscritosPorTurma(req, res) {
  const { turma_id } = req.params;

  try {
    const result = await db.query(
      `SELECT 
         u.id AS usuario_id, 
         u.nome, 
         u.cpf,
         EXISTS (
           SELECT 1 
           FROM presencas p
           WHERE p.usuario_id = u.id 
             AND p.turma_id = $1 
             AND p.data_presenca = CURRENT_DATE
         ) AS presente
       FROM inscricoes i
       JOIN usuarios u ON u.id = i.usuario_id
       WHERE i.turma_id = $1
       ORDER BY u.nome`,
      [turma_id]
    );

    res.json(result.rows);
  } catch (err) {
    console.error("‚ùå Erro ao buscar inscritos:", err);
    res.status(500).json({ erro: "Erro ao buscar inscritos." });
  }
}

// ‚úÖ Exportar
module.exports = {
  inscreverEmTurma,
  cancelarMinhaInscricao,
  obterMinhasInscricoes,
  listarInscritosPorTurma,
};
